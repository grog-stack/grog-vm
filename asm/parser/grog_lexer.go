// Code generated from Grog.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 42, 292,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23,
	9, 23, 4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9,
	28, 4, 29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33,
	4, 34, 9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4,
	39, 9, 39, 4, 40, 9, 40, 4, 41, 9, 41, 3, 2, 6, 2, 85, 10, 2, 13, 2, 14,
	2, 86, 3, 2, 3, 2, 3, 3, 6, 3, 92, 10, 3, 13, 3, 14, 3, 93, 3, 3, 3, 3,
	3, 4, 3, 4, 3, 4, 3, 4, 7, 4, 102, 10, 4, 12, 4, 14, 4, 105, 11, 4, 3,
	4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 7, 5, 116, 10, 5, 12,
	5, 14, 5, 119, 11, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 3,
	7, 3, 7, 3, 7, 3, 7, 3, 7, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 10, 3, 10, 3, 10, 3, 10,
	3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 11, 3, 11, 3, 11, 3, 11, 3,
	12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 13, 3, 13,
	3, 13, 3, 13, 3, 13, 3, 13, 3, 13, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3,
	14, 3, 14, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 16, 3, 16,
	3, 16, 3, 17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 19, 3, 19, 3,
	19, 3, 19, 3, 20, 3, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 21, 3, 21, 3, 21,
	3, 22, 3, 22, 3, 22, 3, 23, 3, 23, 3, 23, 3, 23, 3, 24, 3, 24, 3, 24, 3,
	24, 3, 25, 3, 25, 3, 25, 3, 25, 3, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 27,
	3, 27, 3, 27, 3, 27, 3, 28, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 3,
	30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 30, 3, 31, 3, 31, 3, 31, 3, 31, 3, 31,
	3, 31, 3, 31, 3, 32, 3, 32, 3, 32, 3, 32, 3, 32, 3, 33, 3, 33, 3, 33, 3,
	33, 3, 33, 3, 34, 3, 34, 3, 35, 3, 35, 3, 35, 3, 36, 3, 36, 3, 36, 3, 37,
	3, 37, 3, 37, 3, 38, 3, 38, 3, 38, 3, 39, 3, 39, 3, 39, 3, 40, 3, 40, 3,
	40, 3, 41, 3, 41, 3, 41, 3, 103, 2, 42, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7,
	13, 8, 15, 9, 17, 10, 19, 11, 21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31,
	17, 33, 18, 35, 19, 37, 20, 39, 21, 41, 22, 43, 23, 45, 24, 47, 25, 49,
	26, 51, 27, 53, 28, 55, 29, 57, 30, 59, 31, 61, 32, 63, 33, 65, 34, 67,
	35, 69, 36, 71, 37, 73, 38, 75, 39, 77, 40, 79, 41, 81, 42, 3, 2, 6, 5,
	2, 11, 12, 15, 15, 34, 34, 5, 2, 11, 12, 14, 15, 34, 34, 4, 2, 12, 12,
	15, 15, 5, 2, 50, 59, 67, 72, 99, 104, 2, 295, 2, 3, 3, 2, 2, 2, 2, 5,
	3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13,
	3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2,
	21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2, 27, 3, 2, 2, 2,
	2, 29, 3, 2, 2, 2, 2, 31, 3, 2, 2, 2, 2, 33, 3, 2, 2, 2, 2, 35, 3, 2, 2,
	2, 2, 37, 3, 2, 2, 2, 2, 39, 3, 2, 2, 2, 2, 41, 3, 2, 2, 2, 2, 43, 3, 2,
	2, 2, 2, 45, 3, 2, 2, 2, 2, 47, 3, 2, 2, 2, 2, 49, 3, 2, 2, 2, 2, 51, 3,
	2, 2, 2, 2, 53, 3, 2, 2, 2, 2, 55, 3, 2, 2, 2, 2, 57, 3, 2, 2, 2, 2, 59,
	3, 2, 2, 2, 2, 61, 3, 2, 2, 2, 2, 63, 3, 2, 2, 2, 2, 65, 3, 2, 2, 2, 2,
	67, 3, 2, 2, 2, 2, 69, 3, 2, 2, 2, 2, 71, 3, 2, 2, 2, 2, 73, 3, 2, 2, 2,
	2, 75, 3, 2, 2, 2, 2, 77, 3, 2, 2, 2, 2, 79, 3, 2, 2, 2, 2, 81, 3, 2, 2,
	2, 3, 84, 3, 2, 2, 2, 5, 91, 3, 2, 2, 2, 7, 97, 3, 2, 2, 2, 9, 111, 3,
	2, 2, 2, 11, 122, 3, 2, 2, 2, 13, 127, 3, 2, 2, 2, 15, 133, 3, 2, 2, 2,
	17, 138, 3, 2, 2, 2, 19, 148, 3, 2, 2, 2, 21, 158, 3, 2, 2, 2, 23, 162,
	3, 2, 2, 2, 25, 171, 3, 2, 2, 2, 27, 178, 3, 2, 2, 2, 29, 187, 3, 2, 2,
	2, 31, 192, 3, 2, 2, 2, 33, 195, 3, 2, 2, 2, 35, 199, 3, 2, 2, 2, 37, 202,
	3, 2, 2, 2, 39, 206, 3, 2, 2, 2, 41, 210, 3, 2, 2, 2, 43, 215, 3, 2, 2,
	2, 45, 218, 3, 2, 2, 2, 47, 222, 3, 2, 2, 2, 49, 226, 3, 2, 2, 2, 51, 231,
	3, 2, 2, 2, 53, 235, 3, 2, 2, 2, 55, 239, 3, 2, 2, 2, 57, 242, 3, 2, 2,
	2, 59, 246, 3, 2, 2, 2, 61, 252, 3, 2, 2, 2, 63, 259, 3, 2, 2, 2, 65, 264,
	3, 2, 2, 2, 67, 269, 3, 2, 2, 2, 69, 271, 3, 2, 2, 2, 71, 274, 3, 2, 2,
	2, 73, 277, 3, 2, 2, 2, 75, 280, 3, 2, 2, 2, 77, 283, 3, 2, 2, 2, 79, 286,
	3, 2, 2, 2, 81, 289, 3, 2, 2, 2, 83, 85, 9, 2, 2, 2, 84, 83, 3, 2, 2, 2,
	85, 86, 3, 2, 2, 2, 86, 84, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 88, 3,
	2, 2, 2, 88, 89, 8, 2, 2, 2, 89, 4, 3, 2, 2, 2, 90, 92, 9, 3, 2, 2, 91,
	90, 3, 2, 2, 2, 92, 93, 3, 2, 2, 2, 93, 91, 3, 2, 2, 2, 93, 94, 3, 2, 2,
	2, 94, 95, 3, 2, 2, 2, 95, 96, 8, 3, 2, 2, 96, 6, 3, 2, 2, 2, 97, 98, 7,
	49, 2, 2, 98, 99, 7, 44, 2, 2, 99, 103, 3, 2, 2, 2, 100, 102, 11, 2, 2,
	2, 101, 100, 3, 2, 2, 2, 102, 105, 3, 2, 2, 2, 103, 104, 3, 2, 2, 2, 103,
	101, 3, 2, 2, 2, 104, 106, 3, 2, 2, 2, 105, 103, 3, 2, 2, 2, 106, 107,
	7, 44, 2, 2, 107, 108, 7, 49, 2, 2, 108, 109, 3, 2, 2, 2, 109, 110, 8,
	4, 2, 2, 110, 8, 3, 2, 2, 2, 111, 112, 7, 49, 2, 2, 112, 113, 7, 49, 2,
	2, 113, 117, 3, 2, 2, 2, 114, 116, 10, 4, 2, 2, 115, 114, 3, 2, 2, 2, 116,
	119, 3, 2, 2, 2, 117, 115, 3, 2, 2, 2, 117, 118, 3, 2, 2, 2, 118, 120,
	3, 2, 2, 2, 119, 117, 3, 2, 2, 2, 120, 121, 8, 5, 2, 2, 121, 10, 3, 2,
	2, 2, 122, 123, 7, 110, 2, 2, 123, 124, 7, 113, 2, 2, 124, 125, 7, 99,
	2, 2, 125, 126, 7, 102, 2, 2, 126, 12, 3, 2, 2, 2, 127, 128, 7, 117, 2,
	2, 128, 129, 7, 118, 2, 2, 129, 130, 7, 113, 2, 2, 130, 131, 7, 116, 2,
	2, 131, 132, 7, 103, 2, 2, 132, 14, 3, 2, 2, 2, 133, 134, 7, 101, 2, 2,
	134, 135, 7, 113, 2, 2, 135, 136, 7, 114, 2, 2, 136, 137, 7, 123, 2, 2,
	137, 16, 3, 2, 2, 2, 138, 139, 7, 107, 2, 2, 139, 140, 7, 112, 2, 2, 140,
	141, 7, 101, 2, 2, 141, 142, 7, 116, 2, 2, 142, 143, 7, 103, 2, 2, 143,
	144, 7, 111, 2, 2, 144, 145, 7, 103, 2, 2, 145, 146, 7, 112, 2, 2, 146,
	147, 7, 118, 2, 2, 147, 18, 3, 2, 2, 2, 148, 149, 7, 102, 2, 2, 149, 150,
	7, 103, 2, 2, 150, 151, 7, 101, 2, 2, 151, 152, 7, 116, 2, 2, 152, 153,
	7, 103, 2, 2, 153, 154, 7, 111, 2, 2, 154, 155, 7, 103, 2, 2, 155, 156,
	7, 112, 2, 2, 156, 157, 7, 118, 2, 2, 157, 20, 3, 2, 2, 2, 158, 159, 7,
	99, 2, 2, 159, 160, 7, 102, 2, 2, 160, 161, 7, 102, 2, 2, 161, 22, 3, 2,
	2, 2, 162, 163, 7, 117, 2, 2, 163, 164, 7, 119, 2, 2, 164, 165, 7, 100,
	2, 2, 165, 166, 7, 118, 2, 2, 166, 167, 7, 116, 2, 2, 167, 168, 7, 99,
	2, 2, 168, 169, 7, 101, 2, 2, 169, 170, 7, 118, 2, 2, 170, 24, 3, 2, 2,
	2, 171, 172, 7, 102, 2, 2, 172, 173, 7, 107, 2, 2, 173, 174, 7, 120, 2,
	2, 174, 175, 7, 107, 2, 2, 175, 176, 7, 102, 2, 2, 176, 177, 7, 103, 2,
	2, 177, 26, 3, 2, 2, 2, 178, 179, 7, 111, 2, 2, 179, 180, 7, 119, 2, 2,
	180, 181, 7, 110, 2, 2, 181, 182, 7, 118, 2, 2, 182, 183, 7, 107, 2, 2,
	183, 184, 7, 114, 2, 2, 184, 185, 7, 110, 2, 2, 185, 186, 7, 123, 2, 2,
	186, 28, 3, 2, 2, 2, 187, 188, 7, 108, 2, 2, 188, 189, 7, 119, 2, 2, 189,
	190, 7, 111, 2, 2, 190, 191, 7, 114, 2, 2, 191, 30, 3, 2, 2, 2, 192, 193,
	7, 108, 2, 2, 193, 194, 7, 103, 2, 2, 194, 32, 3, 2, 2, 2, 195, 196, 7,
	108, 2, 2, 196, 197, 7, 112, 2, 2, 197, 198, 7, 103, 2, 2, 198, 34, 3,
	2, 2, 2, 199, 200, 7, 108, 2, 2, 200, 201, 7, 105, 2, 2, 201, 36, 3, 2,
	2, 2, 202, 203, 7, 108, 2, 2, 203, 204, 7, 112, 2, 2, 204, 205, 7, 105,
	2, 2, 205, 38, 3, 2, 2, 2, 206, 207, 7, 108, 2, 2, 207, 208, 7, 105, 2,
	2, 208, 209, 7, 103, 2, 2, 209, 40, 3, 2, 2, 2, 210, 211, 7, 108, 2, 2,
	211, 212, 7, 112, 2, 2, 212, 213, 7, 105, 2, 2, 213, 214, 7, 103, 2, 2,
	214, 42, 3, 2, 2, 2, 215, 216, 7, 108, 2, 2, 216, 217, 7, 110, 2, 2, 217,
	44, 3, 2, 2, 2, 218, 219, 7, 108, 2, 2, 219, 220, 7, 112, 2, 2, 220, 221,
	7, 110, 2, 2, 221, 46, 3, 2, 2, 2, 222, 223, 7, 108, 2, 2, 223, 224, 7,
	110, 2, 2, 224, 225, 7, 103, 2, 2, 225, 48, 3, 2, 2, 2, 226, 227, 7, 108,
	2, 2, 227, 228, 7, 112, 2, 2, 228, 229, 7, 110, 2, 2, 229, 230, 7, 103,
	2, 2, 230, 50, 3, 2, 2, 2, 231, 232, 7, 112, 2, 2, 232, 233, 7, 113, 2,
	2, 233, 234, 7, 118, 2, 2, 234, 52, 3, 2, 2, 2, 235, 236, 7, 99, 2, 2,
	236, 237, 7, 112, 2, 2, 237, 238, 7, 102, 2, 2, 238, 54, 3, 2, 2, 2, 239,
	240, 7, 113, 2, 2, 240, 241, 7, 116, 2, 2, 241, 56, 3, 2, 2, 2, 242, 243,
	7, 122, 2, 2, 243, 244, 7, 113, 2, 2, 244, 245, 7, 116, 2, 2, 245, 58,
	3, 2, 2, 2, 246, 247, 7, 107, 2, 2, 247, 248, 7, 112, 2, 2, 248, 249, 7,
	114, 2, 2, 249, 250, 7, 119, 2, 2, 250, 251, 7, 118, 2, 2, 251, 60, 3,
	2, 2, 2, 252, 253, 7, 113, 2, 2, 253, 254, 7, 119, 2, 2, 254, 255, 7, 118,
	2, 2, 255, 256, 7, 114, 2, 2, 256, 257, 7, 119, 2, 2, 257, 258, 7, 118,
	2, 2, 258, 62, 3, 2, 2, 2, 259, 260, 7, 117, 2, 2, 260, 261, 7, 118, 2,
	2, 261, 262, 7, 113, 2, 2, 262, 263, 7, 114, 2, 2, 263, 64, 3, 2, 2, 2,
	264, 265, 7, 121, 2, 2, 265, 266, 7, 99, 2, 2, 266, 267, 7, 107, 2, 2,
	267, 268, 7, 118, 2, 2, 268, 66, 3, 2, 2, 2, 269, 270, 9, 5, 2, 2, 270,
	68, 3, 2, 2, 2, 271, 272, 5, 67, 34, 2, 272, 273, 5, 67, 34, 2, 273, 70,
	3, 2, 2, 2, 274, 275, 5, 69, 35, 2, 275, 276, 5, 69, 35, 2, 276, 72, 3,
	2, 2, 2, 277, 278, 7, 84, 2, 2, 278, 279, 5, 67, 34, 2, 279, 74, 3, 2,
	2, 2, 280, 281, 7, 70, 2, 2, 281, 282, 5, 69, 35, 2, 282, 76, 3, 2, 2,
	2, 283, 284, 7, 66, 2, 2, 284, 285, 5, 71, 36, 2, 285, 78, 3, 2, 2, 2,
	286, 287, 7, 37, 2, 2, 287, 288, 5, 71, 36, 2, 288, 80, 3, 2, 2, 2, 289,
	290, 7, 44, 2, 2, 290, 291, 5, 71, 36, 2, 291, 82, 3, 2, 2, 2, 7, 2, 86,
	93, 103, 117, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "", "", "", "", "'load'", "'store'", "'copy'", "'increment'", "'decrement'",
	"'add'", "'subtract'", "'divide'", "'multiply'", "'jump'", "'je'", "'jne'",
	"'jg'", "'jng'", "'jge'", "'jnge'", "'jl'", "'jnl'", "'jle'", "'jnle'",
	"'not'", "'and'", "'or'", "'xor'", "'input'", "'output'", "'stop'", "'wait'",
}

var lexerSymbolicNames = []string{
	"", "WHITESPACE", "WS", "COMMENT", "LINE_COMMENT", "LOAD", "STORE", "COPY",
	"INCREMENT", "DECREMENT", "ADD", "SUBTRACT", "DIVIDE", "MULTIPLY", "JUMP",
	"JUMP_IF_EQUAL", "JUMP_IF_NOT_EQUAL", "JUMP_IF_GREATER", "JUMP_IF_NOT_GREATER",
	"JUMP_IF_GREATER_OR_EQUAL", "JUMP_IF_NOT_GREATER_OR_EQUAL", "JUMP_IF_LESS",
	"JUMP_IF_NOT_LESS", "JUMP_IF_LESS_OR_EQUAL", "JUMP_IF_NOT_LESS_OR_EQUAL",
	"NOT", "AND", "OR", "XOR", "INPUT", "OUTPUT", "STOP", "WAIT", "HEX_DIGIT",
	"HEXA_BYTE", "WORD", "REGISTER", "DEVICE", "ABSOLUTE_ADDRESS", "OFFSET_ADDRESS",
	"POINTER_ADDRESS",
}

var lexerRuleNames = []string{
	"WHITESPACE", "WS", "COMMENT", "LINE_COMMENT", "LOAD", "STORE", "COPY",
	"INCREMENT", "DECREMENT", "ADD", "SUBTRACT", "DIVIDE", "MULTIPLY", "JUMP",
	"JUMP_IF_EQUAL", "JUMP_IF_NOT_EQUAL", "JUMP_IF_GREATER", "JUMP_IF_NOT_GREATER",
	"JUMP_IF_GREATER_OR_EQUAL", "JUMP_IF_NOT_GREATER_OR_EQUAL", "JUMP_IF_LESS",
	"JUMP_IF_NOT_LESS", "JUMP_IF_LESS_OR_EQUAL", "JUMP_IF_NOT_LESS_OR_EQUAL",
	"NOT", "AND", "OR", "XOR", "INPUT", "OUTPUT", "STOP", "WAIT", "HEX_DIGIT",
	"HEXA_BYTE", "WORD", "REGISTER", "DEVICE", "ABSOLUTE_ADDRESS", "OFFSET_ADDRESS",
	"POINTER_ADDRESS",
}

type GrogLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewGrogLexer(input antlr.CharStream) *GrogLexer {

	l := new(GrogLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Grog.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// GrogLexer tokens.
const (
	GrogLexerWHITESPACE                   = 1
	GrogLexerWS                           = 2
	GrogLexerCOMMENT                      = 3
	GrogLexerLINE_COMMENT                 = 4
	GrogLexerLOAD                         = 5
	GrogLexerSTORE                        = 6
	GrogLexerCOPY                         = 7
	GrogLexerINCREMENT                    = 8
	GrogLexerDECREMENT                    = 9
	GrogLexerADD                          = 10
	GrogLexerSUBTRACT                     = 11
	GrogLexerDIVIDE                       = 12
	GrogLexerMULTIPLY                     = 13
	GrogLexerJUMP                         = 14
	GrogLexerJUMP_IF_EQUAL                = 15
	GrogLexerJUMP_IF_NOT_EQUAL            = 16
	GrogLexerJUMP_IF_GREATER              = 17
	GrogLexerJUMP_IF_NOT_GREATER          = 18
	GrogLexerJUMP_IF_GREATER_OR_EQUAL     = 19
	GrogLexerJUMP_IF_NOT_GREATER_OR_EQUAL = 20
	GrogLexerJUMP_IF_LESS                 = 21
	GrogLexerJUMP_IF_NOT_LESS             = 22
	GrogLexerJUMP_IF_LESS_OR_EQUAL        = 23
	GrogLexerJUMP_IF_NOT_LESS_OR_EQUAL    = 24
	GrogLexerNOT                          = 25
	GrogLexerAND                          = 26
	GrogLexerOR                           = 27
	GrogLexerXOR                          = 28
	GrogLexerINPUT                        = 29
	GrogLexerOUTPUT                       = 30
	GrogLexerSTOP                         = 31
	GrogLexerWAIT                         = 32
	GrogLexerHEX_DIGIT                    = 33
	GrogLexerHEXA_BYTE                    = 34
	GrogLexerWORD                         = 35
	GrogLexerREGISTER                     = 36
	GrogLexerDEVICE                       = 37
	GrogLexerABSOLUTE_ADDRESS             = 38
	GrogLexerOFFSET_ADDRESS               = 39
	GrogLexerPOINTER_ADDRESS              = 40
)
